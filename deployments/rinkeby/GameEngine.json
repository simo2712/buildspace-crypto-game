{
  "address": "0xB33b0c4d6485e086b75CC31EA91efCA2B4f67668",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionid",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "RandomNumberCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RequestedRandomNumber",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "playerParameter",
          "type": "uint256"
        }
      ],
      "name": "dodgeOrCritical",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandonNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_attackers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_results",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea8a783c851682b203cc553e721fa221b9df7916f4e62da134923ed6db80dec0",
  "receipt": {
    "to": null,
    "from": "0x8A6D14ae8898e95311fCf63C9180F19b492CEE59",
    "contractAddress": "0xB33b0c4d6485e086b75CC31EA91efCA2B4f67668",
    "transactionIndex": 15,
    "gasUsed": "707941",
    "logsBloom": "0x
    "blockHash": "0x5e4ee417dca0bd0d866f0b63635ce21017f6fdd56e257ca14382a95651954eef",
    "transactionHash": "0xea8a783c851682b203cc553e721fa221b9df7916f4e62da134923ed6db80dec0",
    "logs": [],
    "blockNumber": 11238249,
    "cumulativeGasUsed": "2333795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "0",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff208b2d84c66cb87728b57fede432a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionid\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RandomNumberCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RequestedRandomNumber\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"playerParameter\",\"type\":\"uint256\"}],\"name\":\"dodgeOrCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandonNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_attackers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_results\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameEngine.sol\":\"GameEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/GameEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract GameEngine is VRFConsumerBaseV2 {\\n    /* State Variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionid;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint32 private constant ATTACK_IN_PROGRESS = 0;\\n\\n    // A Mapping for the check of critical attacks or dodge\\n    mapping(uint256 => address) public s_attackers;\\n    mapping(address => uint256) public s_results;\\n\\n    event RequestedRandomNumber(uint256 requestId, address sender);\\n    event RandomNumberCreated(uint256 requestId, uint256 randomNumber);\\n\\n    constructor(\\n        address vrfCoordinatorV2, // contract\\n        bytes32 gasLane,\\n        uint64 subscriptionid,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionid = subscriptionid;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function requestRandonNumber() external {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionid,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        s_attackers[requestId] = msg.sender;\\n        s_results[msg.sender] = ATTACK_IN_PROGRESS;\\n        emit RequestedRandomNumber(requestId, msg.sender);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        uint256 value = (randomWords[0] % 100) + 1;\\n        s_results[s_attackers[requestId]] = value;\\n        emit RandomNumberCreated(requestId, value);\\n    }\\n\\n    function dodgeOrCritical(address sender, uint256 playerParameter) external view returns (bool) {\\n        if (s_results[sender] <= playerParameter) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeeef8784e788ef9ce571ad988feb02d66fb1e71457a19fc08cfb586267037f0b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162000e9638038062000e9683398181016040528101906200003891906200014d565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260c081815250508167ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101008163ffffffff1660e01b81525050505050506200028e565b600081519050620001028162000226565b92915050565b600081519050620001198162000240565b92915050565b60008151905062000130816200025a565b92915050565b600081519050620001478162000274565b92915050565b600080600080608085870312156200016a576200016962000221565b5b60006200017a87828801620000f1565b94505060206200018d8782880162000108565b9350506040620001a08782880162000136565b9250506060620001b3878288016200011f565b91505092959194509250565b6000620001cc82620001dd565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b6200023181620001bf565b81146200023d57600080fd5b50565b6200024b81620001d3565b81146200025757600080fd5b50565b6200026581620001fd565b81146200027157600080fd5b50565b6200027f816200020d565b81146200028b57600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c610bb0620002e660003960006102fd015260006102da015260006102b90152600061027d01526000818161011401526101680152610bb06000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631fe543e31461005c57806343f80b97146100785780637660d02a146100a8578063c4c97c4e146100d8578063cdae629414610108575b600080fd5b610076600480360381019061007191906106fa565b610112565b005b610092600480360381019061008d91906106a0565b6101d2565b60405161009f91906107bf565b60405180910390f35b6100c260048036038101906100bd9190610660565b610205565b6040516100cf9190610803565b60405180910390f35b6100f260048036038101906100ed9190610633565b610261565b6040516100ff9190610871565b60405180910390f35b610110610279565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101c457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101bb9291906107da565b60405180910390fd5b6101ce828261046a565b5050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610256576001905061025b565b600090505b92915050565b60016020528060005260406000206000915090505481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161033e95949392919061081e565b602060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039091906106cd565b90503360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600063ffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd6598998ddac6117a6cbdf6c8a3dbd54ddd9b8e98d37b51b85acdff0f83ede52813360405161045f92919061088c565b60405180910390a150565b6000600160648360008151811061048457610483610ac9565b5b60200260200101516104969190610a3a565b6104a0919061092f565b9050806001600080600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f0bbfb2bbc9ab2ad2cf499bba841f1b575328f61e4982607c0f61070f84b8788a83826040516105499291906108b5565b60405180910390a1505050565b600061056961056484610903565b6108de565b9050808382526020820190508285602086028201111561058c5761058b610b2c565b5b60005b858110156105bc57816105a28882610609565b84526020840193506020830192505060018101905061058f565b5050509392505050565b6000813590506105d581610b4c565b92915050565b600082601f8301126105f0576105ef610b27565b5b8135610600848260208601610556565b91505092915050565b60008135905061061881610b63565b92915050565b60008151905061062d81610b63565b92915050565b60006020828403121561064957610648610b36565b5b6000610657848285016105c6565b91505092915050565b6000806040838503121561067757610676610b36565b5b6000610685858286016105c6565b925050602061069685828601610609565b9150509250929050565b6000602082840312156106b6576106b5610b36565b5b60006106c484828501610609565b91505092915050565b6000602082840312156106e3576106e2610b36565b5b60006106f18482850161061e565b91505092915050565b6000806040838503121561071157610710610b36565b5b600061071f85828601610609565b925050602083013567ffffffffffffffff8111156107405761073f610b31565b5b61074c858286016105db565b9150509250929050565b61075f81610985565b82525050565b61076e81610997565b82525050565b61077d816109a3565b82525050565b61078c816109ad565b82525050565b61079b816109db565b82525050565b6107aa816109e5565b82525050565b6107b9816109f5565b82525050565b60006020820190506107d46000830184610756565b92915050565b60006040820190506107ef6000830185610756565b6107fc6020830184610756565b9392505050565b60006020820190506108186000830184610765565b92915050565b600060a0820190506108336000830188610774565b61084060208301876107b0565b61084d6040830186610783565b61085a60608301856107a1565b61086760808301846107a1565b9695505050505050565b60006020820190506108866000830184610792565b92915050565b60006040820190506108a16000830185610792565b6108ae6020830184610756565b9392505050565b60006040820190506108ca6000830185610792565b6108d76020830184610792565b9392505050565b60006108e86108f9565b90506108f48282610a09565b919050565b6000604051905090565b600067ffffffffffffffff82111561091e5761091d610af8565b5b602082029050602081019050919050565b600061093a826109db565b9150610945836109db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561097a57610979610a6b565b5b828201905092915050565b6000610990826109bb565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b610a1282610b3b565b810181811067ffffffffffffffff82111715610a3157610a30610af8565b5b80604052505050565b6000610a45826109db565b9150610a50836109db565b925082610a6057610a5f610a9a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610b5581610985565b8114610b6057600080fd5b50565b610b6c816109db565b8114610b7757600080fd5b5056fea26469706673582212206a033b453ad7c183286bdf39f3aa0bfe88718a328a7acc9f3b3b67d3f0545ed364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631fe543e31461005c57806343f80b97146100785780637660d02a146100a8578063c4c97c4e146100d8578063cdae629414610108575b600080fd5b610076600480360381019061007191906106fa565b610112565b005b610092600480360381019061008d91906106a0565b6101d2565b60405161009f91906107bf565b60405180910390f35b6100c260048036038101906100bd9190610660565b610205565b6040516100cf9190610803565b60405180910390f35b6100f260048036038101906100ed9190610633565b610261565b6040516100ff9190610871565b60405180910390f35b610110610279565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101c457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101bb9291906107da565b60405180910390fd5b6101ce828261046a565b5050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610256576001905061025b565b600090505b92915050565b60016020528060005260406000206000915090505481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161033e95949392919061081e565b602060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039091906106cd565b90503360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600063ffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd6598998ddac6117a6cbdf6c8a3dbd54ddd9b8e98d37b51b85acdff0f83ede52813360405161045f92919061088c565b60405180910390a150565b6000600160648360008151811061048457610483610ac9565b5b60200260200101516104969190610a3a565b6104a0919061092f565b9050806001600080600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f0bbfb2bbc9ab2ad2cf499bba841f1b575328f61e4982607c0f61070f84b8788a83826040516105499291906108b5565b60405180910390a1505050565b600061056961056484610903565b6108de565b9050808382526020820190508285602086028201111561058c5761058b610b2c565b5b60005b858110156105bc57816105a28882610609565b84526020840193506020830192505060018101905061058f565b5050509392505050565b6000813590506105d581610b4c565b92915050565b600082601f8301126105f0576105ef610b27565b5b8135610600848260208601610556565b91505092915050565b60008135905061061881610b63565b92915050565b60008151905061062d81610b63565b92915050565b60006020828403121561064957610648610b36565b5b6000610657848285016105c6565b91505092915050565b6000806040838503121561067757610676610b36565b5b6000610685858286016105c6565b925050602061069685828601610609565b9150509250929050565b6000602082840312156106b6576106b5610b36565b5b60006106c484828501610609565b91505092915050565b6000602082840312156106e3576106e2610b36565b5b60006106f18482850161061e565b91505092915050565b6000806040838503121561071157610710610b36565b5b600061071f85828601610609565b925050602083013567ffffffffffffffff8111156107405761073f610b31565b5b61074c858286016105db565b9150509250929050565b61075f81610985565b82525050565b61076e81610997565b82525050565b61077d816109a3565b82525050565b61078c816109ad565b82525050565b61079b816109db565b82525050565b6107aa816109e5565b82525050565b6107b9816109f5565b82525050565b60006020820190506107d46000830184610756565b92915050565b60006040820190506107ef6000830185610756565b6107fc6020830184610756565b9392505050565b60006020820190506108186000830184610765565b92915050565b600060a0820190506108336000830188610774565b61084060208301876107b0565b61084d6040830186610783565b61085a60608301856107a1565b61086760808301846107a1565b9695505050505050565b60006020820190506108866000830184610792565b92915050565b60006040820190506108a16000830185610792565b6108ae6020830184610756565b9392505050565b60006040820190506108ca6000830185610792565b6108d76020830184610792565b9392505050565b60006108e86108f9565b90506108f48282610a09565b919050565b6000604051905090565b600067ffffffffffffffff82111561091e5761091d610af8565b5b602082029050602081019050919050565b600061093a826109db565b9150610945836109db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561097a57610979610a6b565b5b828201905092915050565b6000610990826109bb565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b610a1282610b3b565b810181811067ffffffffffffffff82111715610a3157610a30610af8565b5b80604052505050565b6000610a45826109db565b9150610a50836109db565b925082610a6057610a5f610a9a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610b5581610985565b8114610b6057600080fd5b50565b610b6c816109db565b8114610b7757600080fd5b5056fea26469706673582212206a033b453ad7c183286bdf39f3aa0bfe88718a328a7acc9f3b3b67d3f0545ed364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2820,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "s_attackers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2824,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "s_results",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}